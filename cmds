
rolling update demo - image: kodekloud/webapp-color:v2     v1(blue) v2(red) v3(green) strategy- recreate or rollingupdate 25% doen 25% up

#kubectl run nginx --image=nginx
pod/nginx created

kuebctl get pods

kubectl describe pod newpods-6rn6n

kubectl get pods -o wide

kubectl delete pod <podname>

kubectl run redis --image=redis123 --dry-run=client -o yaml > redis-definition.yaml

____
  cat redis-definition.yaml 
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: redis
  name: redis
spec:
  containers:
  - image: redis123
    name: redis
    resources: {}
  dnsPolicy: ClusterFirst
  restartPolicy: Always
status: {}
_____

kubectl create -f redis-definition.yaml
pod/redis created

kubectl edit pod redis
chnage--name from redis123 to redis

kubectl get replicaset

kubectl get replicaset
NAME              DESIRED   CURRENT   READY   AGE
new-replica-set   4         4         0       20s

kubectl get pods

kubectl delete pod new-replica-set-qkdd9 new-replica-set-f6bhg new-replica-set-m454x new-replica-set-zs99r

cat replicaset-definition-1.yaml 
__
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: replicaset-1
spec:
  replicas: 2
  selector:
    matchLabels:
      tier: frontend
  template:
    metadata:
      labels:
        tier: frontend
    spec:
      containers:
      - name: nginx
        image: nginx

____


kubectl delete -f  replicaset-definition-1.yaml

kubectl scale rs new-replica-set --replicas=2 

kubectl get service

kubectl describe service

kubectl get deployments

cat service-definition-1.yaml 
---
apiVersion: v1
kind: Service
metadata:
  name: webapp-service 
  namespace: default
spec:
  ports:
  - nodePort: 30080 
    port: 8080
    targetPort: 8080 
  selector:
    name: simple-webapp
  type: NodePort

_____
kubectl get ns

kubectl get pods -n research

kubectl run redis --image=redis -n finance

kubectl get pods -A | grep blue

kubectl run nginx-pod --image=nginx:alpine

kubectl run redis --image=redis:alpine --dry-run=client -oyaml > redis-pod.yaml   0r kubectl run redis -l tier=db --image=redis:alpine

kubectl apply -f redis-pod.yaml

kubectl expose pod redis --port=6379 --name redis-service

kubectl create deployment  webapp --image=kodekloud/webapp-color --replicas=3

kubectl run custom-nginx --image=nginx --port=8080

kubectl create namespace dev-ns

kubectl create deployment redis-deploy --image=redis --replicas=2 -n dev-ns

kubectl run httpd --image=httpd:alpine --port=80 --expose

kubectl get pods --selector env=dev --no-headers | wc -l

kubectl describe node node01 | grep -i taints

kubectl taint nodes node01 spray=mortein:NoSchedule
cat sample.yaml 
---
apiVersion: v1
kind: Pod
metadata:
  name: mosquito
spec:
  containers:
  - image: nginx
    name: mosquito


Create another pod named bee with the nginx image, which has a toleration set to the taint mortein
---
apiVersion: v1
kind: Pod
metadata:
  name: bee
spec:
  containers:
  - image: nginx
    name: bee
  tolerations:
  - key: spray
    value: mortein
    effect: NoSchedule
    operator: Equal
___
kubectl taint nodes controlplane node-role.kubernetes.io/control-plane:NoSchedule-
node/controlplane untainted

kubectl label node node01 color=blue

kubectl create deployment blue --image=nginx --replicas=3

___
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: blue
spec:
  replicas: 3
  selector:
    matchLabels:
      run: nginx
  template:
    metadata:
      labels:
        run: nginx
    spec:
      containers:
      - image: nginx
        imagePullPolicy: Always
        name: nginx
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: color
                operator: In
                values:
                - blue

____

---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    app: elasticsearch
  name: elasticsearch
  namespace: kube-system
spec:
  selector:
    matchLabels:
      app: elasticsearch
  template:
    metadata:
      labels:
        app: elasticsearch
    spec:
      containers:
      - image: registry.k8s.io/fluentd-elasticsearch:1.20
        name: fluentd-elasticsearch


______

static pods

kubectl run --restart=Never --image=busybox static-busybox --dry-run=client -o yaml --command -- sleep 1000 > /etc/kubernetes/manifests/static-busybox.yaml



____
##metrics##
kubectl top node --sort-by='cpu' --no-headers | head -1

kubectl top node --sort-by='memory' --no-headers | h

kubectl top pod --sort-by='memory' --no-headers | head -1

kubectl proxy

kubectl port-forward

git clone https://github.com/kodekloudhub/kubernetes-metrics-server.git


dashboard

https://redlock.io/blog/cryptojacking-tesla

https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/

https://github.com/kubernetes/dashboard

https://www.youtube.com/watch?v=od8TnIvuADg 

https://blog.heptio.com/on-securing-the-kubernetes-dashboard-16b09b1b7aca

https://github.com/kubernetes/dashboard/blob/master/docs/user/access-control/creating-sample-user.md


releases
https://github.com/kubernetes/kubernetes/releases

https://github.com/kubernetes/design-proposals-archive/blob/main/release/versioning.md

https://github.com/kubernetes/design-proposals-archive/blob/main/api-machinery/api-group.md

https://blog.risingstack.com/the-history-of-kubernetes/

https://kubernetes.io/docs/setup/version-skew-policy









